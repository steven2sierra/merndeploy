{"version":3,"sources":["components/PetTable.jsx","views/Main.jsx","components/PetForm.jsx","views/New.jsx","views/Show.jsx","views/Edit.jsx","App.js","serviceWorker.js","index.js"],"names":["props","useState","pets","setPets","useEffect","axios","get","then","res","data","catch","err","console","log","map","p","i","key","name","type","to","_id","PetTable","setName","setType","description","setDescription","skillOne","setSkillOne","skillTwo","setSkillTwo","skillThree","setSkillThree","errors","setErrors","onSubmit","e","preventDefault","pet","post","navigate","errorResponse","response","errorArr","Object","keys","push","message","onChange","target","value","PetForm","show","setShow","removeFromDOM","onClick","ID","delete","put","App","adopt","setAdopt","className","Main","path","New","Show","filter","Edit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.827e84b3.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Link} from '@reach/router';\r\nimport axios from 'axios';\r\nexport default props => {\r\n    // state\r\n    const [pets, setPets] = useState([]);\r\n    // useEffect, retrieve all pets\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/pets')\r\n            .then(res => {\r\n                setPets(res.data); // retrieve data\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, [])\r\n    // return\r\n    return(\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Type</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    pets.map((p,i) => \r\n                        <tr key={i}>\r\n                            <td>{p.name}</td>\r\n                            <td>{p.type}</td>\r\n                            <td>\r\n                                <Link to={`/pets/${p._id}`}>details</Link> | <Link to={`/pets/${p._id}/edit`}>edit</Link>\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport PetTable from '../components/PetTable';\r\nimport {Link} from '@reach/router';\r\n\r\n// MAIN\r\nexport default props => {\r\n    // return\r\n    return(\r\n        <div>\r\n            <h2>These pets are looking for a good home</h2>\r\n            <Link to={'/pets/new'}>add a pet to a new home</Link>\r\n            <PetTable/>\r\n        </div> \r\n    );\r\n}","import React, {useState} from 'react';\r\n// axios\r\nimport axios from 'axios';\r\nimport {navigate} from '@reach/router';\r\n\r\nexport default props => {\r\n    // set state\r\n    const [name, setName] = useState(\"\");\r\n    const [type, setType] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [skillOne, setSkillOne] = useState(\"\");\r\n    const [skillTwo, setSkillTwo] = useState(\"\");\r\n    const [skillThree, setSkillThree] = useState(\"\");\r\n    // set errors\r\n    const [errors, setErrors] = useState([]);\r\n    // submit handler\r\n    const submitHandler = e => {\r\n        // prevent default js\r\n        e.preventDefault();\r\n        const pet = {\r\n            name,\r\n            type,\r\n            description,\r\n            skillOne,\r\n            skillTwo,\r\n            skillThree\r\n        }\r\n        // axios\r\n        axios.post('http://localhost:8000/api/pets/new', pet)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                // setName(res.data.name);\r\n                // setType(res.data.type);\r\n                // setDescription(res.data.description);\r\n                // setSkillOne(res.data.skillOne);\r\n                // setSkillTwo(res.data.skillTwo);\r\n                // setSkillThree(res.data.skillThree);\r\n                // navigate home if successful\r\n                navigate('/');\r\n            })\r\n            .catch(err => {\r\n                const errorResponse = err.response.data.errors;\r\n                const errorArr = [];\r\n                for(const key of Object.keys(errorResponse)){\r\n                    errorArr.push(errorResponse[key].message)\r\n                }\r\n                setErrors(errorArr);\r\n            });\r\n    }\r\n    // return\r\n    return(\r\n        <div>\r\n            <form onSubmit={submitHandler}>\r\n                {errors.map((err, i) => <p key={i}>{err}</p>)}\r\n                <div>\r\n                    <label>Name:</label>\r\n                    <input type=\"text\" onChange={e => setName(e.target.value) }/>\r\n                </div>\r\n                <div>\r\n                    <label>Type:</label>\r\n                    <input type=\"text\" onChange={e=> setType(e.target.value)}/>\r\n                </div>\r\n                <div>\r\n                    <label>Description:</label>\r\n                    <input type=\"text\" onChange={e=> setDescription(e.target.value)}/>\r\n                </div>\r\n                <div>\r\n                    <label>Skill One:</label>\r\n                    <input type=\"text\" onChange={e=> setSkillOne(e.target.value)}/>\r\n                </div>\r\n                <div>\r\n                    <label>Skill Two:</label>\r\n                    <input type=\"text\" onChange={e=> setSkillTwo(e.target.value)}/>\r\n                </div>\r\n                <div>\r\n                    <label>Skill Three:</label>\r\n                    <input type=\"text\" onChange={e=> setSkillThree(e.target.value)}/>\r\n                </div>\r\n                <input type=\"submit\" value=\"ADD PET\"/>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport PetForm from '../components/PetForm';\r\n\r\nexport default props => {\r\n    // return\r\n    return(\r\n        <div>\r\n            <h2>Know a pet needing a home?</h2>\r\n            <PetForm/>\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {Link, navigate} from '@reach/router';\r\n// ADOPT\r\n// import Adopt from '../components/Adopt';\r\n\r\nexport default props => {\r\n    // show pet\r\n    const [show, setShow] = useState(\"\");\r\n    // useEffect\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/api/pets/${props._id}`)\r\n            .then(res => {\r\n                setShow(res.data);\r\n            }).catch(err => console.log(err));\r\n    }, [props._id]) // dependency array\r\n    /*\r\n        Remove From DOM\r\n    */\r\n    const {removeFromDOM} = props;\r\n    // destroy\r\n    const adoptPet = ID => {\r\n        axios.delete(`http://localhost:8000/api/pets/destroy/${ID}`)\r\n            .then(res => {\r\n                removeFromDOM(ID);\r\n                navigate('/');\r\n            }).catch(err => console.log(err));\r\n    }\r\n    // return\r\n    return(\r\n        <div>\r\n            <Link to={'/'}>back to home</Link>\r\n            <h2>Details about: {show.name}</h2>\r\n                <label>Pet Type: </label>\r\n                    <p>{show.type}</p>\r\n                <br></br>\r\n                <label>Description:</label>\r\n                    <p>{show.description}</p>\r\n                <br></br>\r\n                <label>Skills:</label>\r\n                    <p>{show.skillOne}</p>\r\n                    <p>{show.skillTwo}</p>\r\n                    <p>{show.skillThree}</p>\r\n                <br></br>\r\n            {/* adopt */}\r\n            <button onClick={e=>{adoptPet(show._id)}}>Adopt {show.name}</button>\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {navigate, Link} from '@reach/router';\r\n\r\nexport default props => {\r\n    // set state\r\n    const [name, setName] = useState(\"\");\r\n    const [type, setType] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [skillOne, setSkillOne] = useState(\"\");\r\n    const [skillTwo, setSkillTwo] = useState(\"\");\r\n    const [skillThree, setSkillThree] = useState(\"\");\r\n    // set errors\r\n    const [errors, setErrors] = useState([]);\r\n    // useEffect\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/api/pets/${props._id}`)\r\n            .then(res => {\r\n                setName(res.data.name);\r\n                setType(res.data.type);\r\n                setDescription(res.data.description);\r\n                setSkillOne(res.data.skillOne);\r\n                setSkillTwo(res.data.skillTwo);\r\n                setSkillThree(res.data.skillThree);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, [props._id])\r\n    // update\r\n    const update = e => {\r\n        e.preventDefault();\r\n        const pet = {\r\n            name,\r\n            type,\r\n            description,\r\n            skillOne,\r\n            skillTwo,\r\n            skillThree\r\n        }\r\n        axios.put(`http://localhost:8000/api/pets/update/${props._id}`, pet)\r\n        .then(res=> {\r\n            console.log(res);\r\n            if(res.data.errors) {\r\n                setErrors(res.data.errors);\r\n            } else {\r\n                navigate('/');\r\n            }\r\n        })\r\n    }\r\n    // return\r\n    return(\r\n        <div>\r\n            <h2>Edit</h2>\r\n            <Link to={'/'}>back to home</Link>\r\n            <form onSubmit={update}>\r\n            {/* error message: display or empty string , else...everything is okay */}\r\n            <p>{errors.name ? errors.name.message : \"\"}</p>\r\n                <label>\r\n                    Name:\r\n                </label>\r\n                <input type=\"text\" onChange={e => setName(e.target.value)} value={name}/>\r\n                <p>{errors.type ? errors.type.message : \"\"}</p>\r\n                <label>\r\n                    Type:\r\n                </label>\r\n                <input type=\"text\" onChange={e => setType(e.target.value)} value={type}/>\r\n                <p>{errors.description ? errors.description.message : \"\"}</p>\r\n                <label>\r\n                    Description:\r\n                </label>\r\n                <input type=\"text\" onChange={e => setDescription(e.target.value)} value={description}/>\r\n                <label>\r\n                    Skill One:\r\n                </label>\r\n                <input type=\"text\" onChange={e => setSkillOne(e.target.value)} value={skillOne}/>\r\n                <label>\r\n                    Skill Two:\r\n                </label>\r\n                <input type=\"text\" onChange={e => setSkillTwo(e.target.value)} value={skillTwo}/>\r\n                <label>\r\n                    Skill Three:\r\n                </label>\r\n                <input type=\"text\" onChange={e => setSkillThree(e.target.value)} value={skillThree}/>\r\n                {/* submit */}\r\n                <input type=\"submit\" value=\"EDIT PET\"/>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {Router} from '@reach/router';\nimport Main from './views/Main';\nimport New from './views/New';\nimport Show from './views/Show';\nimport Edit from './views/Edit';\n\nfunction App() {\n  // trickle down economics...I mean state\n  // set state\n  const [adopt, setAdopt] = useState([]);\n  const removeFromDOM = ID => {\n    setAdopt(adopt.filter(pets => pets._id !== ID))\n  }\n  return (\n    <div className=\"App\">\n      <h1>Pet Shelter</h1>\n      <Router>\n        <Main path=\"/\"/>\n        <New path=\"/pets/new\"/> \n        <Show path=\"/pets/:_id\" removeFromDOM={removeFromDOM} />\n        <Edit path=\"/pets/:_id/edit\"/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}